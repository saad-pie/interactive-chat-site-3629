document.addEventListener('DOMContentLoaded', () => {function addMessage(chatMessagesElement, message, type, username = null) {if (!chatMessagesElement) return null;const messageDiv = document.createElement('div');messageDiv.classList.add('message', `${type}-message`);if (username && type === 'user') {messageDiv.innerHTML = `<strong>${username}:</strong> ${message}`;} else {messageDiv.textContent = message;}chatMessagesElement.appendChild(messageDiv);chatMessagesElement.scrollTop = chatMessagesElement.scrollHeight;return messageDiv;}const infoChatBtn = document.getElementById('infoChatBtn');const infoChatSection = document.getElementById('infoChatSection');const infoChatMessages = document.getElementById('infoChatMessages');const infoChatInput = document.getElementById('infoChatInput');const infoChatSend = document.getElementById('infoChatSend');if (infoChatSection) {if (infoChatBtn) {infoChatBtn.classList.add('active');}const infoBotResponses = {"hello": "Hi there! I'm here to explain this website. What would you like to know?","what is this site about": "This website offers a unique dual-chat experience. You can interact with an AI guide on this page, or navigate to the 'Live Chat Page' for real-time interaction.","how does it work": "The 'Info Page Chat' (this page) helps you understand the site's features. The 'Live Chat Page' is a dedicated space for real-time communication, awaiting a backend integration like FastAPI.","features": "We have two main features: an AI assistant for guidance (this page) and a dynamic live chat interface for real-time interaction (on the 'Live Chat Page', ready for backend integration).","faqs": "I can answer common questions about the site. Just ask! For example, 'What is the purpose?' or 'How do I use the live chat?'","live chat": "The 'Live Chat Page' is where you'll find the live chat. It's designed for real-time communication, whether peer-to-peer or group interactions, and is ready for a backend like FastAPI.","purpose": "The purpose is to provide a seamless transition from learning about the site with an AI guide to actively using its core chat functionality with others, which will be powered by a backend like FastAPI.","default": "I'm designed to help you with information about this website. Please ask questions related to its purpose, features, or how to use it."};function getInfoBotResponse(message) {const lowerCaseMessage = message.toLowerCase().trim();for (const key in infoBotResponses) {if (lowerCaseMessage.includes(key)) {return infoBotResponses[key];}}return infoBotResponses["default"];}function handleInfoChatSend() {const userMessage = infoChatInput.value.trim();if (userMessage) {addMessage(infoChatMessages, userMessage, 'user');infoChatInput.value = '';setTimeout(() => {const botResponse = getInfoBotResponse(userMessage);addMessage(infoChatMessages, botResponse, 'bot');}, 1000);}}if (infoChatSend && infoChatInput) {infoChatSend.addEventListener('click', handleInfoChatSend);infoChatInput.addEventListener('keypress', (e) => {if (e.key === 'Enter') {handleInfoChatSend();}});}}const liveChatNavBtn = document.getElementById('liveChatNavBtn');const liveChatSection = document.getElementById('liveChatSection');const liveChatMessages = document.getElementById('liveChatMessages');const liveChatInput = document.getElementById('liveChatInput');const liveChatSend = document.getElementById('liveChatSend');const currentRoomNameEl = document.getElementById('currentRoomName');const currentUsernameEl = document.getElementById('currentUsername');const joinRoomNavBtn = document.getElementById('joinRoomNavBtn');const joinRoomSection = document.getElementById('joinRoomSection');const usernameInput = document.getElementById('usernameInput');const roomNameInput = document.getElementById('roomNameInput');const joinRoomBtn = document.getElementById('joinRoomBtn');if (joinRoomSection) {if (joinRoomNavBtn) {joinRoomNavBtn.classList.add('active');}if (joinRoomBtn) {joinRoomBtn.addEventListener('click', () => {const username = usernameInput.value.trim();const roomName = roomNameInput.value.trim();if (username && roomName) {window.location.href = `live_chat.html?username=${encodeURIComponent(username)}&room=${encodeURIComponent(roomName)}`;} else {alert('Please enter both a username and a room name.');}});}}if (liveChatSection) {if (liveChatNavBtn) {liveChatNavBtn.classList.add('active');}const urlParams = new URLSearchParams(window.location.search);const username = urlParams.get('username');const room = urlParams.get('room');if (currentRoomNameEl) currentRoomNameEl.textContent = room || 'N/A';if (currentUsernameEl) currentUsernameEl.textContent = username || 'Guest';if (!username || !room) {addMessage(liveChatMessages, 'Error: Username or Room not provided. Please go back and join a room.', 'bot');if (liveChatInput) liveChatInput.disabled = true;if (liveChatSend) liveChatSend.disabled = true;} else {addMessage(liveChatMessages, `Welcome to the '${room}' room, ${username}! This page is ready to connect to a backend chat service like FastAPI.`, 'bot');}async function handleLiveChatSend() {const userMessage = liveChatInput.value.trim();if (userMessage && username && room) {addMessage(liveChatMessages, userMessage, 'user', username);liveChatInput.value = '';try {const typingMessage = addMessage(liveChatMessages, 'Bot is typing...', 'bot');const response = await fetch('/api/chat', {method: 'POST',headers: {'Content-Type': 'application/json'},body: JSON.stringify({ message: userMessage, username: username, room: room })});await new Promise(resolve => setTimeout(resolve, 1500));if (typingMessage && typingMessage.parentNode === liveChatMessages) {liveChatMessages.removeChild(typingMessage);}if (response.ok) {const simulatedBotResponse = `In room '${room}', ${username} said: "${userMessage}". The backend (e.g., FastAPI) would process this and broadcast to the room.`;addMessage(liveChatMessages, simulatedBotResponse, 'bot');} else {const errorText = await response.text().catch(() => 'No response body');addMessage(liveChatMessages, `Error from simulated server: ${response.status} - ${errorText}. Please ensure your backend (e.g., FastAPI) is running.`, 'bot');}} catch (error) {console.error('Error sending message to simulated backend:', error);addMessage(liveChatMessages, `Failed to connect to chat service: ${error.message}. Is your FastAPI backend running and accessible at /api/chat?`, 'bot');const typingMessageElements = liveChatMessages.querySelectorAll('.bot-message');const lastTypingMessage = Array.from(typingMessageElements).find(el => el.textContent === 'Bot is typing...');if (lastTypingMessage && lastTypingMessage.parentNode === liveChatMessages) {liveChatMessages.removeChild(lastTypingMessage);}}}}if (liveChatSend && liveChatInput) {liveChatSend.addEventListener('click', handleLiveChatSend);liveChatInput.addEventListener('keypress', (e) => {if (e.key === 'Enter') {handleLiveChatSend();}});}});});